#include<bits/stdc++.h>
using namespace std;

  
class node{
public:
    int data;
    node* next;
};

class linkedlist{

public:

    node* head;

    linkedlist()
    {
        head = NULL;
    }

    ~linkedlist(){}

    void Insert(int val);

    void display();

    void Erase(int val);

    void reverse_list();

    void sort_list();

};

void linkedlist:: Insert(int val)
{
    node* newnode = new node();
    newnode->data = val;
    newnode->next = NULL;

    if(head==NULL)
    {
        head=newnode;
    }
    else
    {
        node* temp=head;

        while(temp->next != NULL)
        {
            temp = temp->next;
        }

        temp->next = newnode;
    }
}

void linkedlist:: display()
{
    node* temp=head;

    while(temp!=NULL)
    {
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<"\n";
}

void linkedlist:: Erase(int val)
{
    if(head==NULL)
    {
        cout<<"List is empty!\n";
        return;
    }

    if(head->data==val)
    {
        head=head->next;
        cout<<"Value erased successfully!\n";
        return;
    }

    node *prev=head, *cur=head->next;

    while(cur!=NULL)
    {
        if(cur->data==val)
        {
            prev->next=cur->next;
            cout<<"Value erased successfully!\n";
            return;
        }

        prev=cur;
        cur=cur->next;
    }

    cout<<"Value does not exist in the list!\n";
}

void linkedlist:: reverse_list()
{
    node* temp=head;

    node* revnode = NULL;

    node* nextnode;

    while(temp!=NULL)
    {
        head = temp;

        nextnode = temp->next;

        temp->next = revnode;

        revnode = temp;

        temp = nextnode;
    }

}

void linkedlist:: sort_list()
{
    // using bubble sort....

    node* temp = head;

    node* prevnode;

    int n=0, val;

    while(temp!=NULL)
    {
        n++;
        temp=temp->next;
    }

    for(int i=0; i<n-1; i++)
    {
        temp = head->next;

        prevnode = head;

        while(temp!=NULL)
        {
            if(prevnode->data > temp->data)
            {
                val=prevnode->data;
                prevnode->data=temp->data;
                temp->data=val;
            }

            prevnode=temp;
            temp = temp->next;
        }
    }
}

int main()
{
   linkedlist li;

   loop(i,1,6) li.Insert(i);

   li.display();

   li.reverse_list();

   li.display();

   li.Erase(0);
   li.Erase(3);

   li.Insert(3);

   li.display();

   li.sort_list();

   li.display();

   return 0;

}
